# This file was generated by the Gather Extension.
#
#     The intent is that it contains only the code required to produce
#     the same results as the cell originally selected for gathering.
#     Please note that the Python analysis is quite conservative, so if
#     it is unsure whether a line of code is necessary for execution, it
#     will err on the side of including it.
#
# Please let us know if you are satisfied with what was gathered here:
# https://aka.ms/gatherfeedback
# Thanks


# %%
import pandas_datareader.data as web
from pandas_datareader.famafrench import get_available_datasets
import pandas as pd
import numpy as np
import datetime as dt
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as mpl
import matplotlib.dates as mdates
import statsmodels.api as sm
import scipy as sp
from dateutil.relativedelta import relativedelta
import os
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

s_date = '1969-01-01'
e_date = '2023-12-31'
_dir = os.path.realpath('.')

DatatoRead = 'F-F_Research_Data_Factors'
ds_factors = web.DataReader(DatatoRead, 'famafrench', start = s_date, end = e_date)
# %%

df_factors = ds_factors[1].copy()
df_factors.reset_index(inplace = True)
print(df_factors.head(10))
# %%
df_factors = df_factors.set_index(['Date'])
# df_factors.describe()
# df_factors.info()
try:
    df_factors.index = df_factors.index.to_timestamp()
except Exception:
    pass
# %%
RF = df_factors['RF']
# df_factors.head()
# %%
series = df_factors['Mkt-RF']
fig, axes = plt.subplots(1, 2, figsize = (16, 8), sharey = True, sharex = True)

colormap = mpl.colormaps['twilight']
colors = [colormap(i) for i in np.linspace(0.3, 0.5, 5)]

for i, k in enumerate(["ACF", "PACF"]):
    print(i, k)
    if i == 0:
        axes[i].set_ylabel("Correlation Coeff", fontsize = 12)
        plot_acf(series, lags = 0 | 50, zero = False, ax = axes[i])
    else:
        plot_pacf(series, lags = 0 | 50, zero = False, ax = axes[i])

plt.savefig("ACF2")
plt.show()

# %%
def ACF_test(dftest, n_split=3):
    test = np.array_split(dftest, n_split)
    test.insert(0, dftest)
    test_result = {}
    for t, series in enumerate(test):
        start_date = series.index[0].date().strftime('%Y/%m/%d')
        end_date = series.index[-1].date().strftime('%Y/%m/%d')
        sample_range = start_date + '-' + end_date
        sample_num = len(series.index)
        sample_mean = np.round(series.mean(), 3)
        sample_SD = np.round(series.std(), 3)
        sample_coef = np.round(sm.tsa.acf(series, nlags=4) * 100, 1)
        sample_coef = sample_coef[1:]
        sample_LB5 = np.round(
            sm.stats.acorr_ljungbox(series, lags=[4])[0][0], 1)
        sample_LB10 = np.round(
            sm.stats.acorr_ljungbox(series, lags=[8])[0][0], 1)
        if t == 0:
            test_result['Sample Period'] = [sample_range]
            test_result['Sample Size'] = [sample_num]
            test_result['Mean'] = [sample_mean]
            test_result['SD'] = [sample_SD]
            for i in range(len(sample_coef)):
                test_result['\hat\rho_{}'.format(str(i +
                                                     1))] = [sample_coef[i]]
            test_result['\hat Q_5'] = [sample_LB5]
            test_result['\hat Q_10'] = [sample_LB10]
        else:
            test_result['Sample Period'].append(sample_range)
            test_result['Sample Size'].append(sample_num)
            test_result['Mean'].append(sample_mean)
            test_result['SD'].append(sample_SD)
            for i in range(len(sample_coef)):
                test_result['\hat\rho_{}'.format(str(i + 1))].append(
                    sample_coef[i])
            test_result['\hat Q_5'].append(sample_LB5)
            test_result['\hat Q_10'].append(sample_LB10)
    test_result = pd.DataFrame.from_dict(test_result)
    return test_result
    test = np.array_split(dftest, n_split)
    sample_mean = np.round(series.mean(), 3)
    sample_SD = np.round(series.std(), 3)
    sample_coef = np.round(sm.tsa.acf(series, nlags=4) * 100, 1)
    sample_LB5 = np.round(
    sm.stats.acorr_ljungbox(series, lags=[4])[0][0], 1)
    sample_LB10 = np.round(
    sm.stats.acorr_ljungbox(series, lags=[8])[0][0], 1)